basePath: /
definitions:
  fiber.Map:
    additionalProperties: true
    type: object
  noto_internal_services_books_model.ArchiveBookSwagger:
    properties:
      is_archived:
        type: boolean
    type: object
  noto_internal_services_books_model.BookCreate:
    properties:
      created_at:
        type: string
      id:
        type: string
      is_archived:
        type: boolean
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  noto_internal_services_books_model.BookCreateSwagger:
    properties:
      title:
        type: string
    type: object
  noto_internal_services_books_model.BookResponse:
    properties:
      created_at:
        type: string
      id:
        type: string
      is_archived:
        type: boolean
      labels:
        items:
          $ref: '#/definitions/noto_internal_services_books_model.Label'
        type: array
      title:
        type: string
      updated_at:
        type: string
    type: object
  noto_internal_services_books_model.BookUpdateSwagger:
    properties:
      title:
        type: string
    type: object
  noto_internal_services_books_model.Label:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  noto_internal_services_books_model.PaginatedBookResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/noto_internal_services_books_model.BookResponse'
        type: array
      metadata:
        $ref: '#/definitions/noto_internal_services_books_model.PaginationMetadata'
    type: object
  noto_internal_services_books_model.PaginationMetadata:
    properties:
      currentPage:
        type: integer
      nextPage:
        type: integer
      previousPage:
        type: integer
      totalData:
        type: integer
      totalPage:
        type: integer
    type: object
  noto_internal_services_labels_model.AddBookLabelResponse:
    properties:
      book_id:
        type: string
      id:
        type: string
      label_id:
        type: string
    type: object
  noto_internal_services_labels_model.BookLabelSwagger:
    properties:
      label_name:
        type: string
    type: object
  noto_internal_services_labels_model.BookResponse:
    properties:
      created_at:
        type: string
      id:
        type: string
      is_archived:
        type: boolean
      title:
        type: string
      updated_at:
        type: string
    type: object
  noto_internal_services_labels_model.LabelCreate:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  noto_internal_services_labels_model.LabelCreateSwagger:
    properties:
      name:
        type: string
    type: object
  noto_internal_services_labels_model.LabelResponse:
    properties:
      created_at:
        type: string
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
    type: object
  noto_internal_services_notes_model.NoteCreate:
    properties:
      book_id:
        type: string
      created_at:
        type: string
      id:
        type: string
      text:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  noto_internal_services_notes_model.NoteCreateSwagger:
    properties:
      text:
        type: string
    type: object
  noto_internal_services_notes_model.NoteResponse:
    properties:
      book_id:
        type: string
      created_at:
        type: string
      id:
        type: string
      text:
        type: string
      updated_at:
        type: string
    type: object
  noto_internal_services_notes_model.NoteUpdateSwagger:
    properties:
      text:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Noto API
  title: NOTO API
  version: "1.0"
paths:
  /api/books:
    get:
      description: Get all book
      parameters:
      - description: Filter by archive status
        in: query
        name: is_archived
        type: boolean
      - description: Page number for pagination
        in: query
        minimum: 1
        name: page
        type: integer
      - description: Number of items per page
        in: query
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/noto_internal_services_books_model.PaginatedBookResponse'
      security:
      - BearerAuth: []
      summary: Get all book
      tags:
      - Books
    post:
      consumes:
      - application/json
      description: Create a new book
      parameters:
      - description: Book to create
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/noto_internal_services_books_model.BookCreateSwagger'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/noto_internal_services_books_model.BookCreate'
      security:
      - BearerAuth: []
      summary: Create a new book
      tags:
      - Books
  /api/books/{bookId}:
    get:
      description: Get book by id
      parameters:
      - description: Book ID
        in: path
        name: bookId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/noto_internal_services_books_model.BookResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/fiber.Map'
      security:
      - BearerAuth: []
      summary: Get book by id
      tags:
      - Books
    patch:
      consumes:
      - application/json
      description: Archive book by id
      parameters:
      - description: Book ID
        in: path
        name: bookId
        required: true
        type: string
      - description: Book to archive
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/noto_internal_services_books_model.ArchiveBookSwagger'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/noto_internal_services_books_model.BookResponse'
      security:
      - BearerAuth: []
      summary: Archive book by id
      tags:
      - Books
    put:
      consumes:
      - application/json
      description: Update book by id
      parameters:
      - description: Book ID
        in: path
        name: bookId
        required: true
        type: string
      - description: Book to update
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/noto_internal_services_books_model.BookUpdateSwagger'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/noto_internal_services_books_model.BookResponse'
      security:
      - BearerAuth: []
      summary: Update book by id
      tags:
      - Books
  /api/books/{bookId}/labels:
    delete:
      consumes:
      - application/json
      description: Delete label from book
      parameters:
      - description: Book ID
        in: path
        name: bookId
        required: true
        type: string
      - description: Label to delete
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/noto_internal_services_labels_model.BookLabelSwagger'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Delete label from book
      tags:
      - Labels
    post:
      consumes:
      - application/json
      description: Add label to book
      parameters:
      - description: Book ID
        in: path
        name: bookId
        required: true
        type: string
      - description: Label to add
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/noto_internal_services_labels_model.BookLabelSwagger'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/noto_internal_services_labels_model.AddBookLabelResponse'
      security:
      - BearerAuth: []
      summary: Add label to book
      tags:
      - Labels
  /api/books/{bookId}/notes:
    get:
      description: Get notes by book id
      parameters:
      - description: Page number for pagination
        in: query
        minimum: 1
        name: page
        type: integer
      - description: Number of items per page
        in: query
        minimum: 1
        name: limit
        type: integer
      - description: Book ID
        in: path
        name: bookId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/noto_internal_services_notes_model.NoteResponse'
            type: array
      security:
      - BearerAuth: []
      summary: Get notes by book id
      tags:
      - Notes
    post:
      consumes:
      - application/json
      description: Create a new note
      parameters:
      - description: Book ID
        in: path
        name: bookId
        required: true
        type: string
      - description: Note to create
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/noto_internal_services_notes_model.NoteCreateSwagger'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/noto_internal_services_notes_model.NoteCreate'
      security:
      - BearerAuth: []
      summary: Create a new note
      tags:
      - Notes
  /api/books/{bookId}/notes/{noteId}:
    delete:
      consumes:
      - application/json
      description: Deelete note
      parameters:
      - description: Book ID
        in: path
        name: bookId
        required: true
        type: string
      - description: Note ID
        in: path
        name: noteId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Delete note
      tags:
      - Notes
    patch:
      consumes:
      - application/json
      description: Update note
      parameters:
      - description: Book ID
        in: path
        name: bookId
        required: true
        type: string
      - description: Note ID
        in: path
        name: noteId
        required: true
        type: string
      - description: Note to update
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/noto_internal_services_notes_model.NoteUpdateSwagger'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/noto_internal_services_notes_model.NoteResponse'
      security:
      - BearerAuth: []
      summary: Update note
      tags:
      - Notes
  /api/labels:
    get:
      description: Get all labels
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/noto_internal_services_labels_model.LabelResponse'
            type: array
      security:
      - BearerAuth: []
      summary: Get all labels
      tags:
      - Labels
    post:
      consumes:
      - application/json
      description: Create a new label
      parameters:
      - description: Label to create
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/noto_internal_services_labels_model.LabelCreateSwagger'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/noto_internal_services_labels_model.LabelCreate'
      security:
      - BearerAuth: []
      summary: Create a new label
      tags:
      - Labels
  /api/labels/{labelId}:
    delete:
      consumes:
      - application/json
      description: Delete label
      parameters:
      - description: Label ID
        in: path
        name: labelId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      security:
      - BearerAuth: []
      summary: Delete label
      tags:
      - Labels
  /api/labels/{labelName}/books:
    get:
      description: Get book by label name
      parameters:
      - description: Label Name
        in: path
        name: labelName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/noto_internal_services_labels_model.BookResponse'
      security:
      - BearerAuth: []
      summary: Get book by label name
      tags:
      - Labels
  /auth/google:
    get:
      description: Redirects the user to Google's OAuth consent screen
      produces:
      - application/json
      responses:
        "302":
          description: Redirect to Google's OAuth consent screen
          schema:
            type: string
      summary: Initiate Google OAuth login
      tags:
      - Auth
  /auth/google/callback:
    get:
      consumes:
      - application/json
      description: Processes the OAuth code returned by Google and returns a token
      parameters:
      - description: The authorization code returned by Google
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Handle Google OAuth callback
      tags:
      - Auth
securityDefinitions:
  BearerAuth:
    description: Enter your bearer token in the format **Bearer &lt;token&gt;**
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
